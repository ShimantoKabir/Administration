// <auto-generated />
using System;
using Administration.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Administration.Migrations
{
    [DbContext(typeof(AdministrationDBCtx))]
    [Migration("20201210060515_m1")]
    partial class m1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Administration.Models.Menu", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("component")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ip")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("menuName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("modifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("oId")
                        .HasColumnType("int");

                    b.Property<int?>("orgOid")
                        .HasColumnType("int");

                    b.Property<int>("parentOid")
                        .HasColumnType("int");

                    b.Property<string>("path")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("power")
                        .HasColumnType("int");

                    b.Property<int>("projectOid")
                        .HasColumnType("int");

                    b.Property<string>("tooltip")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("menus");
                });

            modelBuilder.Entity("Administration.Models.Organization", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ip")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("modifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("oId")
                        .HasColumnType("int");

                    b.Property<string>("orgName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("organizations");
                });

            modelBuilder.Entity("Administration.Models.Power", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ip")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("modifiedBy")
                        .HasColumnType("int");

                    b.Property<int?>("orgOid")
                        .HasColumnType("int");

                    b.Property<string>("powerName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("powerValue")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("powers");
                });

            modelBuilder.Entity("Administration.Models.Project", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ip")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("modifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("oId")
                        .HasColumnType("int");

                    b.Property<string>("projectName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("projects");
                });

            modelBuilder.Entity("Administration.Models.RestrictedMenu", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("menuOid")
                        .HasColumnType("int");

                    b.Property<int>("userInfoOid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("restrictedMenus");
                });

            modelBuilder.Entity("Administration.Models.Role", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ip")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("modifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("oId")
                        .HasColumnType("int");

                    b.Property<int?>("orgOid")
                        .HasColumnType("int");

                    b.Property<int>("power")
                        .HasColumnType("int");

                    b.Property<string>("roleName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("Administration.Models.UserConfiguration", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ip")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("modifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("opAccess")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("orgOid")
                        .HasColumnType("int");

                    b.Property<int>("projectOid")
                        .HasColumnType("int");

                    b.Property<int>("roleOid")
                        .HasColumnType("int");

                    b.Property<int>("userInfoOid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("userConfigurations");
                });

            modelBuilder.Entity("Administration.Models.UserInfo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("imgUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ip")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("modifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("oId")
                        .HasColumnType("int");

                    b.Property<int?>("orgOid")
                        .HasColumnType("int");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("socialLoginId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("userId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("userName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("userInfos");

                    b.HasData(
                        new
                        {
                            id = 1,
                            createdAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            email = "developer@mail.com",
                            oId = 1,
                            orgOid = 0,
                            password = "3dacbce532ccd48f27fa62e993067b3c35f094f7",
                            userId = "developer",
                            userName = "developer"
                        },
                        new
                        {
                            id = 2,
                            createdAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            email = "qa@mail.com",
                            oId = 2,
                            orgOid = 0,
                            password = "d3c583412a36313ab5e24293924c39a36b842c56",
                            userId = "qa",
                            userName = "qa"
                        },
                        new
                        {
                            id = 3,
                            createdAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            email = "cto@mail.com",
                            oId = 3,
                            orgOid = 0,
                            password = "19f7ca240c1a90751ff47695616871db95411694",
                            userId = "cto",
                            userName = "cto"
                        },
                        new
                        {
                            id = 4,
                            createdAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            email = "ceo@mail.com",
                            oId = 4,
                            orgOid = 0,
                            password = "9d382342daac150ef51c8383dcf21ff57743b96d",
                            userId = "ceo",
                            userName = "ceo"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
